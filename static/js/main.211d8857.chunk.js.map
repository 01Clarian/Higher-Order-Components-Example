{"version":3,"sources":["ClickCounter.jsx","HoverCounter.jsx","EnhanceComponent.js","App.js","serviceWorker.js","index.js"],"names":["ClickCounter","increment","setState","prevState","count","state","this","onClick","React","Component","EnhanceComponent","OrignComponent","name","props","onMouseOver","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOA0BeA,E,YArBP,aAAe,IAAD,8BACV,+CAKRC,UAAY,WACR,EAAKC,UAAS,SAAAC,GACV,MAAO,CAACC,MAAOD,EAAUC,MAAQ,OANjC,EAAKC,MAAQ,CACTD,MAAO,GAHD,E,sEAYR,IACCA,EAASE,KAAKD,MAAdD,MACP,OACA,4BAAQG,QAASD,KAAKL,WACjBG,O,GAjBcI,IAAMC,WCUlBC,ECVU,SAACC,GAyBtB,OAzByC,YAGrC,aAAe,IAAD,8BACV,+CAMRV,UAAY,WACR,EAAKC,UAAS,SAAAC,GACV,MAAO,CAACC,MAAOD,EAAUC,MAAQ,OAPjC,EAAKC,MAAQ,CACTD,MAAO,GAHD,EAHuB,sEAiBjC,OAEI,6BAAK,kBAACO,EAAD,CAAgBP,MAAOE,KAAKD,MAAMD,MACvCH,UAAWK,KAAKL,UAAWW,KAAK,wBApBH,GAEdJ,IAAMC,WDQtBC,EARM,SAACG,GACd,OACI,wBAAIC,YAAaD,EAAMZ,WAClBY,EAAMT,U,MEKRW,MATf,WACE,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.211d8857.chunk.js","sourcesContent":["import React from 'react';\n\n// Refactor this class based Component into An HOC PATTERN\n\nclass ClickCounter extends React.Component {\n        constructor() {\n            super()\n            this.state = {\n                count: 0\n            }\n        }\n    increment = () => {\n        this.setState(prevState => {\n            return {count: prevState.count + 1}\n        })\n    }\n\n    render() {\n        const {count} = this.state\n        return (\n        <button onClick={this.increment}>\n            {count}</button>\n        );\n}\n}\n\nexport default ClickCounter;","//EXAMPLE OF HOC REFACTORED\n\nimport React from 'react';\n//import the HOC\nimport EnhanceComponent from './EnhanceComponent'\n\nconst HoverCounter = (props)  => {\n        return (\n            <h2 onMouseOver={props.increment}>\n                {props.count}</h2>\n        );\n}\n\n//Wrap the HOC around the inner component\nexport default EnhanceComponent(HoverCounter);","//HOC MODEL SKEL\nimport React from 'react'\n\n// Function that takes a component as an argument (origincomponent)\nconst EnhanceComponent = (OrignComponent) => {    \n//Set up state of count to zero\n    class ModComponent extends React.Component {\n        constructor() {\n            super()\n            this.state = {\n                count: 0\n            }\n        }\n    // same logic as click counter prev state to increment when fired\n    increment = () => {\n        this.setState(prevState => {\n            return {count: prevState.count + 1}\n        })\n    }\n    \n        render() {\n            return (\n                // return OriginComponent to gain access to props.\n                <div><OrignComponent count={this.state.count}\n                increment={this.increment} name='Milk And Sugar' /></div>\n            );\n        }\n    }\n        // return Mod \n    return ModComponent;\n}\n// Export HOC\nexport default EnhanceComponent","import React from 'react';\nimport ClickCounter from './ClickCounter';\nimport HoverCounter from './HoverCounter';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ClickCounter />\n        <HoverCounter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}